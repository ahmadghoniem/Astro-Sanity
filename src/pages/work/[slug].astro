---
import { sanityClient  } from "sanity:client";
import { PortableText } from "astro-portabletext";
import { imageUrlFor } from "@/lib/utils";
import Layout from "@/layouts/Layout.astro";
import LucideIcon from "@/components/ui/LucideIcon.astro";
import {ChevronLeft,ChevronRight} from "lucide"

export async function getStaticPaths() {
  const query = `*[_type == "post"] {
  ...,
  images[] {
    asset->{
      dominant,
      metadata{
        palette,
      dimensions {
        width,
        height,
        "twAspectRatio":"auto_" + string(width) + "_/_" + string(height),
      }
      },
      url
    },
    colSpan
  }
  }`;
  const posts = await sanityClient.fetch(query);
  console.log(posts);
  return posts.map((props,id) => {
    const prevArticle=posts[id-1];
    const nextArticle=posts[id+1];
    const { slug, title, excerpt,images } = props;
    let processedImgs = images.map((img,index)=>({
      width:img.asset.metadata.dimensions.width,
            height:img.asset.metadata.dimensions.height,
            src:imageUrlFor(img).auto("format").url(),
            alt:title,
            aspectRatio:img.asset.metadata.dimensions.aspectRatio,
            transitionName:index === 0 ?  slug.current : undefined,
            BgColorLight:img.asset.metadata.palette.lightMuted.background,
            BgColorDark:img.asset.metadata.palette.darkMuted.background,
            colSpan:img.colSpan,
            twAspectRatio:img.asset.metadata.dimensions.twAspectRatio
              }));
    return {
      params: { slug: slug.current },
      props: { slug, title,excerpt,processedImgs,prevArticle,nextArticle },
    };
  });
}
const {slug, title,excerpt,processedImgs,prevArticle,nextArticle } = Astro.props;
---
<Layout title={title}>
  <section class="p-14">
    <article>
      <figure class="grid grid-cols-6 grid-rows-[min-content_1fr] gap-2">
        <figcaption style="--text-multiplier: 1.5;" class="text-center col-span-6 max-w-5xl mx-auto mb-32">
          <PortableText value={excerpt} />
        </figcaption>

        {processedImgs.map(({BgColorLight,BgColorDark,twAspectRatio,width,height,src,alt,transitionName,colSpan},index) => {
          return ( 
          <div style={`--bg-color-light:${BgColorLight}; --bg-color-dark:${BgColorDark}`} class={`${colSpan} overflow-hidden`}>
          <img
          style={`--aspect-ratio:${twAspectRatio}`}
            width={width}
            height={height}
            src={src}
            alt={alt}
            transition:name={transitionName}
            class="object-cover aspect-[--aspect-ratio]"
          />
        </div>
        )
        })}
      </figure>
    </article>

    <div class="flex flex-row w-full justify-between mt-8">
      {prevArticle && (
        <a
                  class="mr-auto flex flex-row-reverse gap-1 items-center"
          href={`/work/${prevArticle.slug.current}`}
        >
          <h3 class="text-left"> {prevArticle.title} </h3>
          <LucideIcon class="w-8 h-8" icon={ChevronLeft} />
        </a>
      )}
      {nextArticle && (
        <a
          class="ml-auto flex flew-row gap-1 items-center"
          href={`/work/${nextArticle.slug.current}`}
        >
          <h3 class="text-right">{nextArticle.title} </h3>
          <LucideIcon class="w-8 h-8" icon={ChevronRight} />
        </a>
      )}
    </div>
  </section>
</Layout>

        
